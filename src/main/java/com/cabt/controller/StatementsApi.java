/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cabt.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cabt.model.StatementDetails;
import com.cabt.model.StatementMinified;
import com.cabt.model.StatementNew;
import com.cabt.model.StatementNewResponse;
import com.cabt.model.Statements;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;


@RestController
public interface StatementsApi {

	/* @Operation(summary = "To create a new statement in the statement builder view.", description = "Add a new statement in the statement builder view.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "201", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StatementNewResponse.class))),
	        
	        @ApiResponse(responseCode = "400", description = "Bad request."),
	        
	        @ApiResponse(responseCode = "401", description = "When the user is not authorized."),
	        
	        @ApiResponse(responseCode = "409", description = "Conflict occurred.") })
	    @RequestMapping(value = "/statements",
	        produces = { "application/json" }, 
	        consumes = { "application/json" }, 
	        method = RequestMethod.POST)
	    ResponseEntity<StatementNewResponse> addStatement(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new statement group", required=true, schema=@Schema()) @Valid @RequestBody StatementNew body);

*/
	    @Operation(summary = "Deletes the statement based on the statement Id  provided.", description = "Deletes the statement based on the statement Id  provided.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "204", description = "Delete Successful"),
	        
	        @ApiResponse(responseCode = "400", description = "Bad request."),
	        
	        @ApiResponse(responseCode = "401", description = "Unauthorised"),
	        
	        @ApiResponse(responseCode = "403", description = "Forbidden"),
	        
	        @ApiResponse(responseCode = "404", description = "Not Found"),
	        
	        @ApiResponse(responseCode = "409", description = "Conflict") })
	    @RequestMapping(value = "/statements/{statementId}",
	        method = RequestMethod.DELETE)
	    ResponseEntity<Void> deleteStatement(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementId") String statementId);


	    @Operation(summary = "Retrieve all the statements based on the value passed in Query parameters", description = "Retrieve all the statements based on the value passed in Query parameters", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatementMinified.class)))),
	        
	        @ApiResponse(responseCode = "400", description = "Bad Request"),
	        
	        @ApiResponse(responseCode = "401", description = "Unauthorized"),
	        
	        @ApiResponse(responseCode = "403", description = "Forbidden"),
	        
	        @ApiResponse(responseCode = "404", description = "No matching statements are found") })
	    @RequestMapping(value = "/statements",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<List<StatementMinified>> getAllStatement(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "scopeId", required = false) String scopeId, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "Full", "Minified" }
	)) @Valid @RequestParam(value = "retrievalType", required = false) String retrievalType, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "Offset", required = false, defaultValue="0") Integer offset, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit);


	    @Operation(summary = "To retrieve all the statements using a particular settingId. Used to check setting usage.", description = "To retrieve all the statements using a particular settingId. Used to check setting usage.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatementDetails.class)))),
	        
	        @ApiResponse(responseCode = "400", description = "Invalid tag value") })
	    @RequestMapping(value = "/statements/search/settings/{settingId}",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<List<StatementDetails>> getAllStatementBySettingId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("settingId") String settingId);


	    @Operation(summary = "To retrieve a single statement by its Id.", description = "To retrieve a single statement by its Id.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Statements.class)))),
	        
	        @ApiResponse(responseCode = "400", description = "Invalid tag value") })
	    @RequestMapping(value = "/statements/{statementId}",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<List<Statements>> getStatementDetails(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementId") String statementId);


	    @Operation(summary = "To retrieve all the statements using a particular concept alias. Used to check concept alias usage.", description = "To retrieve all the statements using a particular concept alias. Used to check concept alias usage.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatementDetails.class)))),
	        
	        @ApiResponse(responseCode = "400", description = "Invalid tag value") })
	    @RequestMapping(value = "/statements/search/contexts/{contextId}/concepts/{conceptAlias}",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<List<StatementDetails>> getStatementsByContextId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("contextId") String contextId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("conceptAlias") String conceptAlias);


	    @Operation(summary = "To retrieve all the statements using a particular function. Used to check function usage.", description = "To retrieve all the statements using a particular function. Used to check function usage.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatementDetails.class)))),
	        
	        @ApiResponse(responseCode = "400", description = "Invalid tag value") })
	    @RequestMapping(value = "/statements/search/functions/{functionId}",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<List<StatementDetails>> getStatementsByFunctionId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("functionId") String functionId);


	    @Operation(summary = "To retrieve all the statements dependent on a particular statementId. Used to check statement usage.", description = "To retrieve all the statements dependent on a particular statementId. Used to check statement usage.", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatementDetails.class)))),
	        
	        @ApiResponse(responseCode = "400", description = "Invalid tag value") })
	    @RequestMapping(value = "/statements/search/{statementId}",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<List<StatementDetails>> getStatementsByStatementId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementId") String statementId);


	    @Operation(summary = "Update an existing Statement", description = "Update an existing Statement by Id", tags={ "statements" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "204", description = "When successful. The selected statement has been updated."),
	        
	        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
	        
	        @ApiResponse(responseCode = "401", description = "Validation exception"),
	        
	        @ApiResponse(responseCode = "404", description = "Statements not found") })
	    @RequestMapping(value = "/statements/{statementId}",
	        consumes = { "application/json" }, 
	        method = RequestMethod.PUT)
	    ResponseEntity<Void> updateStatements(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementId") String statementId, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existent Statement", required=true, schema=@Schema()) @Valid @RequestBody Statements body);



}

