/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cabt.controller;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.cabt.model.StatementDetails;
import com.cabt.model.StatementGroupNew;
import com.cabt.model.StatementGroupReq;
import com.cabt.model.StatementGroupUpdate;
import com.cabt.model.Statements;
import com.cabt.model.StatementsList;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-10-08T12:16:03.593Z[GMT]")
@Validated
public interface StatementGroupApi {

    @Operation(summary = "Deletes a Statements", description = "delete a Statements", tags={ "statementGroup" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "When successful. The selected statement group has been deleted."),
        
        @ApiResponse(responseCode = "400", description = "Bad request."),
        
        @ApiResponse(responseCode = "401", description = "When the user is not authorized."),
        
        @ApiResponse(responseCode = "404", description = "When resource not found.") })
    @RequestMapping(value = "/statementGroup/{statementGroupId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStatements(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementGroupId") String statementGroupId);


    @Operation(summary = "Retrieve all the statement-groups based on the Query parameters", description = "Retrieve all the statement-groups based on the Query parameters", tags={ "statementGroup" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Statements.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "No matching statements are found"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error"),
        
        @ApiResponse(responseCode = "503", description = "Server error - Service is not available temporarily") })
    @RequestMapping(value = "/statementGroup",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatementsList> getAllStatementGroup(@NotNull @Parameter(
    		in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema())
    @Valid @RequestParam(value = "displayableText", required = true) String displayableText, 
    @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) 
    @Valid @RequestParam(value = "scopeId", required = false) String scopeId, 
    @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="minified"))
    @Valid @RequestParam(value = "retrievalType", required = false, defaultValue="minified") 
    String retrievalType, @Parameter(in = ParameterIn.QUERY, description = "" ,
    schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "Offset", required = false, 
    defaultValue="0") Integer offset, @Parameter(in = ParameterIn.QUERY, description = "" ,
    schema=@Schema( defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, 
    defaultValue="20") Integer limit);


    @Operation(summary = "To retrieve a single statement group by its Id.", description = "To retrieve a single statement group by its Id.", tags={ "statementGroup" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatementDetails.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid tag value") })
    @RequestMapping(value = "/statementGroup/{statementGroupId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatementDetails> getStatementDetails(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementGroupId") String statementGroupId);


    @Operation(summary = "Update an existing Statement", description = "Update an existing Statement by Id", tags={ "statementGroup" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StatementGroupUpdate.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "401", description = "Validation exception"),
        
        @ApiResponse(responseCode = "404", description = "Statements not found") })
    @RequestMapping(value = "/statementGroup/{statementGroupId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<StatementGroupNew> updateStatement(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("statementGroupId") String statementGroupId, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existent Statement", required=true, schema=@Schema()) @Valid @RequestBody StatementDetails body);
    
    @Operation(summary = "To create a new statement group", description = "Add a new statement group", tags={ "statementGroup" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StatementGroupNew.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request."),
        
        @ApiResponse(responseCode = "401", description = "When the user is not authorized."),
        
        @ApiResponse(responseCode = "409", description = "Conflict occurred.") })
    @RequestMapping(value = "/statements",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<StatementGroupNew> saveStatementGroup(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new statement group", required=true, schema=@Schema()) @Valid @RequestBody StatementGroupReq body);

}

